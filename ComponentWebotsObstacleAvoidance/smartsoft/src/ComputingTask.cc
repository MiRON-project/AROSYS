//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "ComputingTask.hh"
#include "ComponentWebotsObstacleAvoidance.hh"
#include "AvoidanceAlgo.hh"
#include <iostream>

ComputingTask::ComputingTask(SmartACE::SmartComponent *comp)
:	ComputingTaskCore(comp)
{
  std::cout << "constructor ComputingTask\n";
}
ComputingTask::~ComputingTask()
{
  std::cout << "destructor ComputingTask\n";
}


void ComputingTask::on_LaserServiceIn(const CommBasicObjects::CommMobileLaserScan &input)
{
  // upcall triggered from InputPort LaserServiceIn
  // - use a local mutex here, because this upcal is called asynchroneously from outside of this task
  // - do not use longer blocking calls here since this upcall blocks the InputPort LaserServiceIn
  // - if you need to implement a long-running procedure, do so within the on_execute() method and in
  //   there, use the method laserServiceInGetUpdate(input) to get a copy of the input object
}

int ComputingTask::on_entry()
{
  // do initialization procedures here, which are called once, each time the task is started
  // it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
  return 0;
}

int ComputingTask::on_execute()
{
  // this method is called from an outside loop,
  // hence, NEVER use an infinite loop (like "while(1)") here inside!!!
  // also do not use blocking calls which do not result from smartsoft kernel

  Smart::StatusCode status;

  //std::cout << "Hello from RobotTask" << std::endl;

  // get laser scan from the port
  status = COMP->laserServiceIn->getUpdateWait(laserScan);

  // check if the transmission worked
  if (status != Smart::SMART_OK) {

    std::cout << "Error receiving laserScan: " << status << std::endl;
    if(status == Smart::SMART_UNSUBSCRIBED) {

      std::cout << "laserClient is unsubscribed -> try to subscribe again" << std::endl;
      status = COMP->laserServiceIn->subscribe();
      std::cout << "laserClient subscription returned with " << status << std::endl;
    }
    sleep(1);
  }
  else
    std::cout << "LaserScan received" << std::endl;

	// print distance to debug
	//for(unsigned int i=0; i<laserScan.get_scan_size(); ++i)
		//if (i%3==0)
			//std::cout << "["<<i<<"] " << laserScan.get_scan_distance(i) << std::endl;

  // using laser scan compute v and w
  double velocityX = 0.0; // in m/s
  double velocityY = 0.0; // in m/s
  double turnrate = 0.0;  // in rad/s
  AvoidanceAlgo::runCycle(laserScan, velocityX, velocityY, turnrate);

  // create and fill the communication object for v and w
  CommBasicObjects::CommNavigationVelocity navigationVelocity;
  navigationVelocity.set_vX(velocityX, 1.0); // in m/s
  navigationVelocity.set_vY(velocityY, 1.0); // in m/s
  navigationVelocity.set_omega(turnrate);   // in rad/s

  // provide result to output port
  status = this->navigationVelocityServiceOutPut(navigationVelocity);

  // check if the transmission worked
  if(status != Smart::SMART_OK) {

    std::cerr << status << std::endl;
    std::cout << "Error providing navigation command: " << status << std::endl;
    sleep(1);
  }
  else
    std::cout << "Navigation commands sent " << navigationVelocity << std::endl;

  // it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
  return 0;
}


int ComputingTask::on_exit()
{
  // use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
  return 0;
}
