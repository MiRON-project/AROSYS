//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "LaserQueryServiceAnswHandler.hh"
#include "ComponentWebotsLidar.hh"

LaserQueryServiceAnswHandler::LaserQueryServiceAnswHandler(IQueryServer *server)
:	LaserQueryServiceAnswHandlerCore(server)
{

}

void LaserQueryServiceAnswHandler::on_update_from(const LaserTask* laserTask)
{
	// update triggered from LaserTask
	// (use a local mutex here, because this method is called from within the thread of LaserTask)
}

void LaserQueryServiceAnswHandler::handleQuery(const Smart::QueryIdPtr &id, const CommBasicObjects::CommVoid& request)
{
	CommBasicObjects::CommMobileLaserScan answer;
	// implement your query handling logic here and fill in the answer object
	this->server->answer(id, answer);

  /*
	std::cout << "Query for basestate \n";

	CommBasicObjects::CommTimeStamp time_stamp;
	CommBasicObjects::CommBaseState commCurrentBaseState;

	// get pose and velocity update from gazebo interface
	if (COMP->pose != NULL && COMP->velocity != NULL) {
		commCurrentBaseState.set_base_position    (COMP->pose->getBasePose());
		commCurrentBaseState.set_base_raw_position(COMP->pose->getBasePose());
		commCurrentBaseState.set_base_velocity    (COMP->velocity->getBaseVelocity());
	}
	else
		std::cout << "Webots simulator not yet started !" << std::endl;

	time_stamp.set_now();
	commCurrentBaseState.set_time_stamp(time_stamp);

  this->server->answer(id, commCurrentBaseState);
	*/

}
